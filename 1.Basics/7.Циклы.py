'''
Циклы предназначены для повторения определенного действия,
до тех пор пока верно условие его инициализации.
'''
'''
Цикл While
После ключевого слова while указывается условие,
и пока оно верно цикл будет повторяться.
while условие:
   инструкции
Цикл while можно описать, как “повторять пока условие верно”
'''

i = 0
while i < 5:
    print("i = ", i)
    i += 1
else:  # Необязательно! Выполняется если while = False
    print("error!")
''' В данном цикле мы задаем переменную i=0.
Условие цикла while i < 5: верно пока i меньше 5.
Выводим на экран сообщение вида i = ,
в котором будет показано текущее значение переменной.
С каждым прохождением по циклу (итерацией) мы добавляем к значению i +1.
Запись i += 1 можно записать иначе, как i = i+1. '''
'''
Цикл for
for выполняет действие для каждого элемента из набора данных.
Для примера мы создаем список lst,
запускаем цикл for по этому списку for x in lst:,
где в x будут передаваться элементы списка lst.
В теле цикла выполняется работа над элементами списка.
В данном случае они отображаются в консоли.
'''

lst = [1, 2, 3, 4, 5]
for x in lst:
    print("x=", x)

# Тоже самое но с получением индексов
for i, x in enumerate(lst):
    # i - индекс, v - значение элемента
    print("x=", x, "i=", i)

# Для указания определенного числа итераций можно использовать функцию range().
for a in range(3):
    print("a= ", a)

# ELSE блок в цикле for
# отработает после цикла если не было использовано break
# или вылет ошибки.

for i in range(2):
    print(i)
    # break
else:
    print("not data")

# Вложенные циклы (функция Product)

lst1 = [1, 2, 3]
lst2 = [3, 4, 5]
lst3 = [6, 7, 8]

for a in lst1:
    for b in lst2:
        for c in lst3:
            if a + b + c == 10:
                print(a, b, c)

# Аналогичная запись с помощью Product
from itertools import product

for a, b, c in product(lst1, lst2, lst3):
    if a + b + c == 10:
        print(a, b, c)
