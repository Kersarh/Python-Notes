"""
Объе́ктно-ориенти́рованное программи́рование (ООП) — методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования.
"""


class A:
    i = 0  # Атрибут класса

    # Метод класса. Указание первым аргументом self обязательно!
    # Это способ, классу ссылаться на самого себя.
    def prnt(self):
        print("i = ", self.i)

    # _ или __ разный уровень доступа
    def _fun1(self):
        print("_fun1")

    def __fun2(self):
        """Этот метод виден только мотодам внутри класса"""
        print("__fun2")


# Теперь мы можем создать несколько экземпляров этого класса
a = A()  # Экземпляр 'a'
b = A()  # Экземпляр 'b'

# Зададим собственные значания для артибута i
a.i = 3  # У экземпляра 'a'  атрибут 'i', равный 3
b.i = 5  # У экземпляра 'b'  атрибут 'i', равный 5
a.prnt()  # Вызов метода экземпляра 'a'
b.prnt()  # Вызов метода экземпляра 'b'

print(a._fun1())  # обращение к __fun2 напрямую вызовет ошибку

# @classmethod — это метод, который получает класс в качестве первого аргумента, так же, как обычный метод получает экземпляр класса. Это позволяет использовать класс и его свойства внутри этого метода, а не свойства конкретного экземпляра. cls должен быть первым аргументом такого метода класса. Функцию classmethod также можно вызывать без создания экземпляра класса.


class MyClass:
    max_obj = 0

    def __init__(self):
        MyClass.max_obj = MyClass.max_obj + 1

    @classmethod
    def my_class_method(cls):  # cls первым аргументом
        print("Всего Экземпляров класса:", cls.max_obj)

    @staticmethod
    def my_static_method(a, b):
        print(a + b)


a = MyClass()
b = MyClass()
MyClass.my_class_method()

# @staticmethod — используется для создания метода, который ничего не знает о классе или экземпляре, через который он был вызван. Ведет себя как обычная функция, определенная внутри класса, не имеет доступа к экземпляру класса. Можно вызывать без создания экземпляра класса

MyClass.my_static_method(5, 10)
