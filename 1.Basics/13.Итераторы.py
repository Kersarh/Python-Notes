'''
Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз.
С точки зрения Python - это любой объект, у которого есть метод __next__.
Этот метод возвращает следующий элемент, если он есть,
или возвращает исключение StopIteration, когда элементы закончились.
'''

num_list = [1, 2, 3]

itr = iter(num_list)
print(next(itr))  # 1
print(next(itr))  # 2
print(next(itr))  # 3

# print(next(itr)) # исключение StopIteration
# На основе такого функционала работает цикл for

#------------------------------------------------

# Собственный итератор

# Если хотите обойти элементы внутри вашего собственного класса, необходимо создать свой итератор.
# Создадим класс, объект которого будет итератором.
# Такой класс должен содержать конструктор,
# принимающий на вход количество единиц и метод __next__().
# Чтобы с данным объектом мог работать цикл for,
# нужно в наш класс добавить метод __iter__(), который возвращает итератор.
# В данном случае этот метод должен возвращать self.


class MyIter:
    def __init__(self, max):
        self.max = max
        self.counter = 0

    def __next__(
        self
    ):  # без метода next экземпляры данного класса не будут итераторами.
        if self.counter < self.max:
            self.counter += 1
            return 1
        else:
            raise StopIteration

    def __iter__(self):  # для работы цикла for
        return self


itr2 = MyIter(5)
for i in itr2:
    print(i)
